
SOLID Principles Summary

Single responsibility principle - A class should have only one reason to change.

Open/Closed principle - Software entities should be open for extension, but closed for modification.

Liskov Substitution Principle - Child classes should never break the parent class type definitions.

Interface Segregation Principle - No client should be forced to depend on methods it does not use.The number of members in the interface that is visible to the dependent class should be minimised.Large classes implement multiple smaller interfaces that group functions according to their usage

Dependency inversion principle - High-level modules should not depend on low-level modules. Both should depend on abstractions. Abstractions should not depend upon details.

The SOLID principles are a set of five design principles for writing maintainable and scalable object-oriented code.
 Below is a summary of each principle, its key idea, common issues in bad code, and solutions for good code.



Principle
Key Idea
Bad Code Issue
Good Code Solution



SRP
One responsibility per class
Class handles multiple tasks
Split responsibilities into separate classes


OCP
Open for extension, closed for modification
Modifying class for new features
Use interfaces for extensibility


LSP
Subtypes must be substitutable
Subclass breaks base class behavior
Use proper interfaces


ISP
Donâ€™t force unused methods
Large interface with irrelevant methods
Split into smaller, specific interfaces


DIP
Depend on abstractions
Tight coupling to concrete classes
Use interfaces for loose coupling



